"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   notificationApi: function() { return /* binding */ notificationApi; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/.pnpm/axios@1.9.0/node_modules/axios/lib/axios.js\");\n\nconst API_BASE_URL = \"http://localhost:8080\" || 0;\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"\".concat(API_BASE_URL, \"/api\"),\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    timeout: 30000\n});\n// Request interceptor for logging\napi.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log(\"\\uD83D\\uDE80 API Request: \".concat((_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase(), \" \").concat(config.url));\n    return config;\n}, (error)=>{\n    console.error(\"❌ API Request Error:\", error);\n    return Promise.reject(error);\n});\n// Response interceptor for logging and error handling\napi.interceptors.response.use((response)=>{\n    console.log(\"✅ API Response: \".concat(response.status, \" \").concat(response.config.url));\n    return response;\n}, (error)=>{\n    var _error_response;\n    console.error(\"❌ API Response Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n    return Promise.reject(error);\n});\nconst notificationApi = {\n    // Broadcast notification to all users\n    async broadcastNotification (data) {\n        try {\n            const response = await api.post(\"/notifications/broadcast\", data);\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to send broadcast notification\");\n        }\n    },\n    // Get notification statistics\n    async getStats () {\n        try {\n            const response = await api.get(\"/notifications/stats\");\n            return response.data.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to fetch notification stats\");\n        }\n    },\n    // Get dashboard statistics (using real data only)\n    async getDashboardStats () {\n        try {\n            // Get real stats from the server\n            const stats = await this.getStats();\n            // Return only real data, no dummy/mock data\n            return {\n                totalUsers: stats.totalActive + stats.totalInactive,\n                activeTokens: stats.totalActive,\n                inactiveTokens: stats.totalInactive,\n                totalNotificationsSent: 0,\n                successRate: stats.totalActive > 0 ? 1.0 : 0,\n                platformDistribution: {\n                    ios: stats.byPlatform.ios || 0,\n                    android: stats.byPlatform.android || 0\n                },\n                recentActivity: [] // Will be populated when we implement activity logging\n            };\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to fetch dashboard stats\");\n        }\n    },\n    // Test notification endpoint\n    async testNotification (data) {\n        try {\n            // For testing, we'll use the same broadcast endpoint but with a flag\n            const testData = {\n                ...data,\n                title: \"[TEST] \".concat(data.title),\n                body: \"[TEST] \".concat(data.body)\n            };\n            const response = await api.post(\"/notifications/broadcast\", testData);\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to send test notification\");\n        }\n    },\n    // Health check\n    async healthCheck () {\n        try {\n            const response = await api.get(\"/health\");\n            return response.data;\n        } catch (error) {\n            // If health endpoint doesn't exist, try stats endpoint\n            try {\n                await this.getStats();\n                return {\n                    status: \"healthy\",\n                    timestamp: new Date().toISOString()\n                };\n            } catch (e) {\n                throw new Error(\"Server is not responding\");\n            }\n        }\n    },\n    // Get push token details (if endpoint exists)\n    async getTokenDetails () {\n        try {\n            const response = await api.get(\"/notifications/tokens\");\n            return response.data;\n        } catch (error) {\n            // Return mock data if endpoint doesn't exist\n            return {\n                tokens: [],\n                total: 0\n            };\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});